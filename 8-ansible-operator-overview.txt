# This section will give a brief overview of the *Ansible Operator* with a step-by-step example of developing an Ansible Operator using [Operator SDK](https://sdk.operatorframework.io).

# The reader is expected to have a basic understanding of the *Operator pattern*. 
#  - Ansible Operator is an Operator which is _powered by Ansible_. 
#  - Custom Resource events trigger Ansible tasks as opposed to the traditional approach of handling these events with Go code.

# Ansible Operator development and testing is fully supported as a first-class citizen within the Operator SDK. Operator SDK can be used to create new Operator projects, test existing Operator projects, build Operator images, and generate new Custom Resource Definitions (CRDs) for an Operator.


# By the end of this section the reader should have a basic understanding of:

# * What the Ansible Operator is
# * How the Ansible Operator maps Custom Resource events to Ansible code
# * How to pass extra variables to Ansible code via the operator
# * How to leverage existing roles from Ansible Galaxy
# * How to deploy and run the Ansible Operator in a OpenShift cluster
# * How to run the Ansible Operator Locally for development

# This step doesn't require changes to the interactive environment, but feel free to explore.


# ## Why an Operator?

# Operators make it easy to manage complex stateful applications on top of Kubernetes. However writing an operator today can be difficult because of challenges such as using low level APIs, writing boilerplate, and a lack of modularity which leads to duplication.

# The Operator SDK is a framework that uses the controller-runtime library to make writing operators easier by providing:

# * High level APIs and abstractions to write the operational logic more intuitively
# * Tools for scaffolding and code generation to bootstrap a new project fast
# * Extensions to cover common operator use cases

# ## What is an Ansible Operator?

# A collection of building blocks from Operator SDK that enables Ansible to handle the reconciliation logic for an Operator.

# ## Included in Operator Framework

# Ansible Operator is one of the available types of Operators that Operator SDK is able to generate. Operator SDK can create an operator using Golang, Helm, or Ansible.

# ## How do I use it?

# Build your Ansible code on top of a provided base image along with some metadata to map Kubernetes events to Ansible Playbooks or Roles.

# Ansible Operator Flow: https://raw.githubusercontent.com/openshift-labs/learn-katacoda/master/ansibleop/ansible-operator-overview/assets/images/ansible-op-flow.png

# The following workflow is for a new Ansible operator:

# 1. Create a new Operator project using the Operator SDK Command Line Interface (CLI)
# 2. Write the reconciling logic for your object using Ansible Playbooks and Roles
# 3. Use the SDK CLI to build and generate the operator deployment manifests
# 4. Optionally add additional CRD's using the SDK CLI and repeat steps 2 and 3



# Now that we have demonstrated the Ansible k8s modules, we want to trigger this Ansible logic when a Custom Resource changes. The Ansible Operator uses a Watches file, written in YAML, which holds the mapping between Custom Resources and Ansible Roles/Playbooks.

# NOTE: It is incredibly important that the Ansible Roles/Playbooks packaged into an Ansible Operator are idempotent (https://docs.ansible.com/ansible/latest/reference_appendices/glossary.html#term-idempotency), as these tasks will be executed frequently to ensure the application is in its proper state.

# ## Structure of a *Watches file*

# The **Watches file** maps Custom Resources (identified by Group, Version, and Kind [GVK]) to Ansible Roles and Playbooks. The Operator expects this mapping file in a predefined location: `/opt/ansible/watches.yaml`

# Each mapping within the Watches file has mandatory fields:

# * **group**: Group of the Custom Resource that you will be watching.

# * **version**: Version of the Custom Resource that you will be watching.

# * **kind**: Kind of the Custom Resource that you will be watching.

# * **role** (_default_): Path to the Role that should be run by the Operator for a particular Group-Version-Kind (GVK). This field is mutually exclusive with the "playbook" field.

# * **playbook** (_optional_): Path to the Playbook that should be run by the Operator for a particular Group-Version-Kind (GVK). A Playbook can be used to invoke multiple Roles. This field is mutually exclusive with the "role" field.

# __Sample watches.yaml__

# ---
# - version: v1alpha1
#   group: foo.example.com
#   kind: Foo
#   # associates GVK with Role
#   role: /opt/ansible/roles/Foo


# By default, `operator-sdk new --type ansible` creates 'watches.yaml' configured to *execute a role* in response to a *Custom Resource* event. 

# This works well for smaller projects, but for more complex Ansible we might not want all of our logic in a single role. 


# ## Triggering a Playbook instead of a Role

# Configuring the *Watches file* to run a Playbook allows the developer more flexibility in consuming other Ansible roles and enabling more customized application deployments. 

# To use a Playbook in your operator, you would modify `watches.yaml` as shown below:

---
- version: v1alpha1
  group: foo.example.com
  kind: Foo
  # associating a Custom Resource GVK with a Playbook
  playbook: /opt/ansible/playbook.yaml


# For this to work, we would need to copy `playbook.yaml` into the container image.

# You would accomplish this by modifying the Operator Dockerfile to *COPY* 'playbook.yaml' into the container as shown below:

# # Dockerfile at <project-name>/build/Dockerfile

FROM quay.io/operator-framework/ansible-operator

COPY roles/ ${HOME}/roles
COPY watches.yaml ${HOME}/watches.yaml

# New 'COPY' build step for playbook.yaml
COPY playbook.yaml ${HOME}/playbook.yaml


# ## Preconfiguration for a Playbook

# If you know from the start that you want your Operator to use a Playbook instead of a Role, you can generate your project scaffolding with the `--generate-playbook` flag:

operator-sdk init --plugins=ansible --domain example.com
operator-sdk create api --group cache --version v1alpha1 --kind Memcached --generate-playbook


# Using Ansible Operator, a *change in the state* of a Custom Resource (CR) signals to the Operator that certain Playbooks/Roles should be executed. So what does a Custom Resource look like?

# As a creator/user of an Ansible Operator, you'll create CRs to test that your Operator has the expected response to each CR trigger.

# ## Structure of a Custom Resource 

# The Custom Resource takes the format of a Kubernetes resource. The object definition has _mandatory_ fields:

# ### Mandatory Fields

# * **apiVersion**: Version of the Custom Resource that will be created

# * **kind**: Kind of the Custom Resource that will be created

# * **metadata**: Kubernetes metadata that will be created

# * **spec**: Key-value list of variables which are passed to Ansible. *Optional* and will be empty by default.

# * **annotations**: Kubernetes annotations to be appended to the CR. See the below section for Ansible Operator specific annotations.

# ### Annotations
# Custom Resource annotations can be applied to modify Ansible Operator behavior:

# * **ansible.operator-sdk/reconcile-period**: Used to specify the reconciliation interval for the CR. 
#   * This value is parsed using the standard [Golang 'Package time'](https://golang.org/pkg/time/). Specifically, ParseDuration is used which will use the default of an 's' suffix giving the value in seconds (e.g. "30" would become "30s" as shown below).

# ## Custom Resource Example
# If an Ansible Operator was watching for events from `kind: Foo` with `apiVersion: foo.example.com/v1alpha1`, an Ansible Playbook/Role could be triggered in response to creation of the resource shown below.

apiVersion: "foo.example.com/v1alpha1"
kind: "Foo"
metadata:
  name: "example"
annotations:
  ansible.operator-sdk/reconcile-period: "30s"


# To pass 'extra vars' to the Playbooks/Roles being run by the Operator, you can embed key-value pairs in the 'spec' section of the *Custom Resource (CR)*.

# This is equivalent to how --extra-vars (https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.html#passing-variables-on-the-command-line) can be passed into the  _ansible-playbook_ command.

# ## Example CR with extra-vars

# The CR snippet below shows two 'extra vars' (`message` and `newParamater`) being passed in via `spec`. Passing 'extra vars' through the CR allows for customization of Ansible logic based on the contents of each CR instance.
# # Sample CR definition where some 
# # 'extra vars' are passed via the spec
apiVersion: "app.example.com/v1alpha1"
kind: "Database"
metadata:
  name: "example"
spec:
  message: "Hello world 2"
  newParameter: "newParam"



# ## Accessing CR Fields

# Now that you've passed 'extra vars' to your Playbook through the CR `spec`, we need to read them from the Ansible logic that makes up your Operator.

# Variables passed in through the CR spec are made available at the top-level to be read from Jinja templates. For the CR example above, we could read the vars 'message' and 'newParameter' from a Playbook like so:

# - debug:
#     msg: "message value from CR spec: {{ message }}"

# - debug:
#     msg: "newParameter value from CR spec: {{ new_parameter }}"  


# Did you notice anything strange about the snippet above? The 'newParameter' variable that we set on our CR spec was accessed as 'new_parameter'. Keep this automatic conversion from camelCase to snake_case in mind, as it will happen to all 'extra vars' passed into the CR spec.

# Refer to the next section for further info on reaching into the JSON structure exposed in the Ansible Operator runtime environment.

# ### JSON Structure 

# When a reconciliation job runs, the content of the associated CR is made available as variables in the Ansible runtime environment.

# The JSON below is an example of what gets passed into ansible-runner (the Ansible Operator runtime). 

# Note that vars added to the 'spec' section of the CR ('message' and 'new_parameter') are placed at the top-level of this structure for easy access. 

{ "meta": {
        "name": "<cr-name>",
        "namespace": "<cr-namespace>",
  },
  "message": "Hello world 2",
  "new_parameter": "newParam",
  "_app_example_com_database": {
     <Full CR>
   },
}


# ### Accessing CR metadata

# The `meta` fields provide the CR 'name' and 'namespace' associated with a reconciliation job. These and other nested fields can be accessed with dot notation in Ansible.

# - debug:
#     msg: "name: {{ meta.name }}, namespace: {{ meta.namespace }}"


# In the next step, we'll use `operator-sdk` to generate our Operator project scaffolding.
# Next, we'll learn how to use the operator-sdk CLI to create an Ansible Operator project with the 'init' and `create` commands.

# A basic 'init' command looks like this:
operator-sdk init --plugins=ansible --domain example.com

# This command tells operator-sdk to initialize a new Ansible Operator project scaffolding with the domain of your choosing. 

# Among the files generated by this command is a Kubebuilder PROJECT file. Subsequent operator-sdk commands (and help text) run from the project root read this file and are aware that the project type is Ansible.

operator-sdk create api -h

# After initilizating our Ansible Operator project, we run the `operator-sdk create api` command and provide the group, version, and kind of the CRD we'd like to create.

operator-sdk create api --group app --version v1alpha1 --kind App --generate-role

# We should now see the following file structure:

tree

# ├── Dockerfile
# ├── Makefile
# ├── PROJECT
# ├── config
# │   ├── crd
# │   │   ├── bases
# │   │   │   └── app.example.com_apps.yaml
# │   │   └── kustomization.yaml
# │   ├── default
# │   │   ├── kustomization.yaml
# │   │   └── manager_auth_proxy_patch.yaml
# │   ├── manager
# │   │   ├── kustomization.yaml
# │   │   └── manager.yaml
# │   ├── prometheus
# │   │   ├── kustomization.yaml
# │   │   └── monitor.yaml
# │   ├── rbac
# │   │   ├── app_editor_role.yaml
# │   │   ├── app_viewer_role.yaml
# │   │   ├── auth_proxy_client_clusterrole.yaml
# │   │   ├── auth_proxy_role.yaml
# │   │   ├── auth_proxy_role_binding.yaml
# │   │   ├── auth_proxy_service.yaml
# │   │   ├── kustomization.yaml
# │   │   ├── leader_election_role.yaml
# │   │   ├── leader_election_role_binding.yaml
# │   │   ├── role.yaml
# │   │   └── role_binding.yaml
# │   ├── samples
# │   │   ├── app_v1alpha1_app.yaml
# │   │   └── kustomization.yaml
# │   ├── scorecard
# │   │   ├── bases
# │   │   │   └── config.yaml
# │   │   ├── kustomization.yaml
# │   │   └── patches
# │   │       ├── basic.config.yaml
# │   │       └── olm.config.yaml
# │   └── testing
# │       ├── debug_logs_patch.yaml
# │       ├── kustomization.yaml
# │       ├── manager_image.yaml
# │       └── pull_policy
# │           ├── Always.yaml
# │           ├── IfNotPresent.yaml
# │           └── Never.yaml
# ├── molecule
# │   ├── default
# │   │   ├── converge.yml
# │   │   ├── create.yml
# │   │   ├── destroy.yml
# │   │   ├── kustomize.yml
# │   │   ├── molecule.yml
# │   │   ├── prepare.yml
# │   │   ├── tasks
# │   │   │   └── app_test.yml
# │   │   └── verify.yml
# │   └── kind
# │       ├── converge.yml
# │       ├── create.yml
# │       ├── destroy.yml
# │       └── molecule.yml
# ├── playbooks
# ├── requirements.yml
# ├── roles
# │   └── app
# │       ├── README.md
# │       ├── defaults
# │       │   └── main.yml
# │       ├── files
# │       ├── handlers
# │       │   └── main.yml
# │       ├── meta
# │       │   └── main.yml
# │       ├── tasks
# │       │   └── main.yml
# │       ├── templates
# │       └── vars
# │           └── main.yml
# └── watches.yaml


# # Running 'operator-sdk init'
# Now it's your turn! We'll be building a Memcached (https://memcached.org/) Ansible Operator for the remainder of this scenario. 

# Let's create a new directory for our project:
mkdir -p $HOME/tutorial/memcached-operator

# Navigate to the directory:
cd $HOME/tutorial/memcached-operator

# Initialize a new Ansible-based Operator SDK project for the Memcached Operator:
operator-sdk init --plugins=ansible --domain example.com

# Create the Memcached API and generate an Ansible role skeleton.  This will ensure our controller is setup to watch the
# Memcached resource with APIVersion 'cache.example.com/v1alpha1' and Kind 'Memcached'.
operator-sdk create api --group cache --version v1alpha1 --kind Memcached --generate-role

# ## Inspecting the results
# Inspect the memcached-operator directory structure for yourself with 'tree', and then 'cd' into it.

tree

# ### Project Scaffolding Layout

# After creating a new operator project the directory has numerous generated folders and files. The following
# table describes a basic rundown of each generated file/directory.

# | File/Folders   | Purpose                           |
# | :---           | :--- |
# | config | Kustomize YAML definitions required to launch our controller on a cluster. It is the target directory to hold our CustomResourceDefinitions, RBAC configuration, and WebhookConfigurations.
# | Dockerfile | The container build file used to build your Ansible Operator container image. |
# | Makefile | Make targets for building and deploying your controller. |
# | molecule | Used for Ansible Based Operator Testing. See [this link](https://sdk.operatorframework.io/docs/building-operators/ansible/testing-guide/) for more information.
# | playbooks | placeholder for possible ansible playbook.
# | PROJECT | Kubebuilder metadata for scaffolding new components. |
# | requirements.yaml | requirements.yaml for defining an Ansible collection.
# | roles | Contains an Ansible Role initialized using [Ansible Galaxy](https://docs.ansible.com/ansible/latest/reference_appendices/galaxy.html)
# | watches.yaml | Contains Group, Version, Kind, and Ansible invocation method. |
# Up to this point, we have created the memcached-operator project specifically for watching the Memcached resource with APIVersion 'cache.example.com/v1apha1' and Kind 'Memcached'.  Now it's time to define the Operator logic.

# ## Customize the Operator logic

# For this example the memcached-operator will execute the following
# reconciliation logic for each 'Memcached' Custom Resource (CR):
# - Create a memcached Deployment if it doesn't exist
# - Ensure that the Deployment size is the same as specified by the 'Memcached'
# CR

# ## Installing an existing Role from Ansible Galaxy

# To speed development of our Operator up, we can reuse an existing Role. We will install a Role from Ansible Galaxy into our Operator: 

# dymurray.memcached_operator_role: galaxy.ansible.com (https://galaxy.ansible.com/dymurray/memcached_operator_role)

# Run the following to install the Ansible Role inside of the project:

ansible-galaxy install dymurray.memcached_operator_role -p ./roles

ls roles/
# dymurray.memcached_operator_role memcached

# ## Removing the unneeded Role
# Since we'll be reusing the logic from 'dymurray.memcached_operator_role', we can safely delete the placeholder Role generated by the the 'operator-sdk new' command we ran previously.

rm -rf ./roles/memcached

# ## Taking a Closer Look: dymurray.memcached_operator_role

# We can use the 'tree' command to get a general sense of the memcached Role installed from Ansible Galaxy.

tree roles/dymurray.memcached_operator_role


# ### Role Variables
# This Role provides the user with a variable `size` which is an integer to
# control the number of Deployment replicas to create. You can find the default for this variable in the memcached Role _defaults/main.yml_ file:

# ---
# # defaults file for Memcached
# size: 1

# ### Role Tasks
# Be sure to examine the memcached Role _tasks/main.yml_ file, which uses the [_k8s_ (Kubernetes) Ansible module](https://docs.ansible.com/ansible/latest/modules/k8s_module.html)
#  to create a Deployment of memcached.
# ---
# # tasks file for Memcached
# - name: start memcached
#   k8s:
#     definition:
#       kind: Deployment
#       apiVersion: apps/v1
#       metadata:
#         name: '{{ ansible_operator_meta.name }}-memcached'
#         namespace: '{{ ansible_operator_meta.namespace }}'
#       spec:
#         replicas: "{{size}}"
#         selector:
#           matchLabels:
#             app: memcached
  
#   [ ... continued ...]


# Next, we'll modify the necessary files to ensure that our Operator
# uses this Role instead of the generated scaffolding Role. Let's
# modify `watches.yaml`.

# ## Correcting the Watches File

# By default, the memcached-operator watches `Memcached` resource events as shown
# in `watches.yaml` and executes Ansible Role `Memcached`. 

# Since we have swapped out the original Role for one from Ansible Galaxy, lets change the Watches file to reflect this:

<pre class="file">
---
- version: v1alpha1
  group: cache.example.com
  kind: Memcached
  role: /opt/ansible/roles/dymurray.memcached_operator_role
</pre>

# Update this file by running the following command:

\cp /tmp/watches.yaml watches.yaml

# In the next step, we'll build and run our Ansible Operator.
# Before running the Operator, Kubernetes needs to know about the new custom
# resource definition the Operator will be watching.

# ### Deploy the Memcached Custom Resource Definition (CRD):
oc create -f config/crd/bases/cache.example.com_memcacheds.yaml

# By running this command, we are creating a new resource type, `memcached`, on the cluster. We will give our Operator work to do by creating and modifying resources of this type.

# ## Ways to Run an Operator

# Once the CRD is registered, there are two ways to run the Operator:

# * As a Pod inside a Kubernetes cluster
# * As a Go program outside the cluster using Operator-SDK. This is great for local development of your Operator.

# For the sake of this tutorial, we will run the Operator as a Go program outside the cluster using Operator-SDK.## Copying Roles for local development
# It is important that the Role path referenced in watches.yaml exists on
# your machine. 

# To run our Operator locally, we will manually copy any Roles used by our Operator to a configured Ansible
# Roles path for our local machine (e.g /etc/ansible/roles).

mkdir -p /opt/ansible/roles

# ## Running with 'operator-sdk run --local'

# ### Sample Commands
# Running `make run` to run an Operator locally requires a KUBECONFIG value to connect with a cluster. A sample command is shown below.

# Automatically sets KUBECONFIG=$HOME/.kube/config
make run

# For this scenario, we will create a new namespace/project called `tutorial`. We will then start up our Operator and ensure our operator only watches for Custom Resources within this namespace.


# ### Create the Namespace/Project
oc new-project tutorial

# ### Start the Operator and set the WATCH_NAMESPACE variable 
WATCH_NAMESPACE=tutorial make run

# Next open a 2nd terminal window, using the "+" tab and navigate to our Operator.

cd ~/tutorial/memcached-operator


# Now that our Operator is running, let's create a CR and deploy an instance
# of memcached.

# There is a sample CR in the scaffolding created as part of the Operator SDK:

apiVersion: cache.example.com/v1alpha1
kind: Memcached
metadata:
  name: memcached-sample
spec:
  foo: bar

# ## Create a Memcached CR instance

# Inspect `config/samples/cache_v1alpha1_memcached.yaml`, and then update the object to specify 3 replicas:

apiVersion: cache.example.com/v1alpha1
kind: Memcached
metadata:
  name: memcached-sample
spec:
  size: 3

# Update this file by running the following command:

\cp /tmp/cache_v1alpha1_memcached.yaml config/samples/cache_v1alpha1_memcached.yaml

oc --namespace tutorial create -f config/samples/cache_v1alpha1_memcached.yaml

# ## Check that the Memcached Operator works as intended

# Ensure that the memcached-operator creates the deployment for the CR:


# Check the pods to confirm 3 replicas were created:


# ## Change the Memcached CR to deploy 4 replicas

# Change the `spec.size` field in `config/samples/cache_v1alpha1_memcached.yaml` from 3 to 4.

<pre class="file">
apiVersion: cache.example.com/v1alpha1
kind: Memcached
metadata:
  name: memcached-sample
spec:
  size: 4
</pre>

oc --namespace tutorial apply -f config/samples/cache_v1alpha1_memcached.yaml

# Confirm that the Operator changes the Deployment size:


# Inspect the YAML list of 'memcached' resources in your project, noting that the 'spec.size' field is now set to 4.

oc get memcached  -o yaml

# ## Removing Memcached from the cluster 

# First, delete the 'memcached' CR, which will remove the 4 Memcached Pods and the associated Deployment.

oc --namespace tutorial delete -f config/samples/cache_v1alpha1_memcached.yaml

# Verify the memcached CR and deployment have been properly removed.

oc get memcached

oc get deployment


# Thank you for taking a closer look at the *Ansible Operator*.  For more
# Information, check out the links below:

# ## Git Hub
#  * Operator-Framework: https://github.com/operator-framework
#  * Operator-SDK: https://sdk.operatorframework.io/docs/building-operators/ansible/

# ## YouTube
# * Memcached Ansible Operator Demo: https://www.youtube.com/watch?v=Smk9oQp7YMY
# * OpenShift Commons Briefing Ansible Operator - Operator Framework SIG: https://www.youtube.com/watch?v=YFTQJI6foGc

# ## Samples
# * Sample Operators using Ansible: https://github.com/operator-framework/operator-sdk-samples/tree/master/ansible

# ## Chat
# * Kubernetes Slack Chat (upstream): #kubernetes-operators at https://kubernetes.slack.com/
# * Operator-Framework on Google Groups: https://groups.google.com/forum/#!forum/operator-framework
# * OpenShift Operators Special Interest Group (SIG): https://commons.openshift.org/sig/OpenshiftOperators.html
