# Since you are interested in *using Ansible for lifecycle management of applications on Kubernetes*, it will be beneficial to learn how to use the Ansible k8s (Kubernetes) module: https://docs.ansible.com/ansible/latest/modules/k8s_module.html#k8s-info-module

# The k8s module allows you to:
#  - Leverage your existing Kubernetes resource files (written in YAML) 
#  - Express Kubernetes lifecycle management actions in native Ansible.

# One of the biggest benefits of using Ansible in conjunction with existing Kubernetes resource files is the ability to use Ansible's built-in Jinja templating (https://docs.ansible.com/ansible/latest/user_guide/playbooks_templating.html) engine to customize deployments by simply setting Ansible variables.

# By the end of this scenario, you'll be able to use the Ansible k8s module to:

# - Create and remove Kubernetes resources
# - Reuse existing Kubernetes manifest files with Ansible

# For this example we will *create and delete a namespace* with the switch of an Ansible variable.

# a. Modify tasks file `example-role/tasks/main.yml` to contain the Ansible shown below.**

<pre class="file">
---
- name: set test namespace to {{ state }}
  k8s:
    api_version: v1
    kind: Namespace
    name: test
    state: "{{ state }}"
  ignore_errors: true

</pre>

# You can easily update this file by running the following command:
`wget -q https://raw.githubusercontent.com/openshift-labs/learn-katacoda/master/ansibleop/ansible-k8s-modules/assets/tasksmain1.yml -O /root/tutorial/example-role/tasks/main.yml`{{execute}}

# b. Modify vars file `example-role/defaults/main.yml`, setting `state: present` by default.**

<pre class="file">
---
state: present

</pre>

# You can easily update this file by running the following command:
`wget -q https://raw.githubusercontent.com/openshift-labs/learn-katacoda/master/ansibleop/ansible-k8s-modules/assets/defaultsmain1.yml -O /root/tutorial/example-role/defaults/main.yml`{{execute}}

# c. Run playbook.yml, which will execute 'example-role'.**

`ansible-playbook -i myhosts playbook.yml`{{execute}}


# d. Check that the namespace `test` was created.**

oc get projects | grep test

# NAME              DISPLAY NAME   STATUS
# test                             Active


# Next, we'll use the Ansible k8s module to leverage existing Kubernetes and OpenShift Resource files. Let's take the nginx deployment example (https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#creating-a-deployment)
# from the Kubernetes docs.  

# Note: We've modified the resource file slightly as we will be deploying on OpenShift.

#  a. Copy the nginx deployment definition `nginx-deployment.yml` into `example-role/templates`, adding a .j2 extension

cp nginx-deployment.yml ./example-role/templates/nginx-deployment.yml.j2

cat ./example-role/templates/nginx-deployment.yml.j2

kind: Deployment
apiVersion: apps/v1
metadata:
  name: nginx-deployment
spec:
  template:
    metadata:
      labels:
        name: nginx
    spec:
      containers:
        - name: nginx
          image: nginx:1.15.4
          ports:
          - containerPort: 80
  replicas: 3
  selector:
    name: nginx


# b. Update tasks file `example-role/tasks/main.yml` to create the nginx deployment using the k8s module

 <pre class="file">
---
- name: set test namespace to {{ state }}
  k8s:
   api_version: v1
   kind: Namespace
   name: test
   state: "{{ state }}"

- name: set nginx deployment to {{ state }}
  k8s:
   state: "{{ state }}"
   definition: "{{ lookup('template', 'nginx-deployment.yml.j2') }}"
   namespace: test
 </pre>

# You can easily update this file by running the following command:
wget -q https://raw.githubusercontent.com/openshift-labs/learn-katacoda/master/ansibleop/ansible-k8s-modules/assets/tasksmain2.yml -O /root/tutorial/example-role/tasks/main.yml


# c. Run the Playbook to deploy nginx onto OpenShift

# Running the Playbook with the command below will read the `state` variable defined in `example-role/defaults/main.yml`

ansible-playbook -i myhosts playbook.yml


# d. Examine Playbook results
# You can see the `test` namespace created and the `nginx` deployment created in the new namespace.

oc get all -n test

# Next, let's make it possible to customize the replica count for our nginx deployment (https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#creating-a-deployment) by adding an `nginx_replicas` variable to the Deployment template and filling the variable value dynamically with Ansible.

# a. Modify vars file `example-role/defaults/main.yml`, setting `nginx_replicas: 2`

<pre class="file">
---
state: present
nginx_replicas: 2

</pre>

# You can easily update this file by running the following command:
wget -q https://raw.githubusercontent.com/openshift-labs/learn-katacoda/master/ansibleop/ansible-k8s-modules/assets/defaultsmain2.yml -O /root/tutorial/example-role/defaults/main.yml


# b. Modify nginx deployment definition `nginx-deployment.yml.j2` to read `replicas` from the `nginx_replicas` variable

 <pre class="file">
kind: Deployment
apiVersion: apps/v1
metadata:
  name: nginx-deployment
spec:
  template:
    metadata:
      labels:
        name: nginx
    spec:
      containers:
        - name: nginx
          image: nginx:1.15.4
          ports:
          - containerPort: 80
  replicas: {{ nginx_replicas }}
  selector:
    name: nginx
 </pre>

# You can easily update this file by running the following command:
wget -q https://raw.githubusercontent.com/openshift-labs/learn-katacoda/master/ansibleop/ansible-k8s-modules/assets/nginx-deployment-updated.yml.j2 -O /root/tutorial/example-role/templates/nginx-deployment.yml.j2


# c. Run the Playbook to change the nginx replica count**
# Running the Playbook again will read the variable `nginx_replicas` and use the provided value to customize the nginx Deployment.

ansible-playbook -i myhosts playbook.yml


# d. Examine Playbook results
# After running the Playbook, the cluster will scale down one of the nginx pods to meet the new requested replica count of 2. 

oc get pods -n test

# e. Tear down the nginx deployment
# To remove the nginx deployment, we'll override the `state` variable to contain `state=absent` using the [`-e / --extra-vars`](https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.html#passing-variables-on-the-command-line) flag. 

ansible-playbook -i myhosts playbook.yml --extra-vars state=absent


# Thank you for taking a closer look at the Ansible Operator.  For more
# information, check out the links below:

# ## K8s Ansible Module
#  * https://docs.ansible.com/ansible/latest/modules/k8s_module.html

# ## Git Hub
#  * Operator-Framework: https://github.com/operator-framework
#  * Operator-SDK: https://github.com/operator-framework/operator-sdk/

# ## YouTube
# * Memcached Ansible Operator Demo: https://www.youtube.com/watch?v=Smk9oQp7YMY
# * OpenShift Commons Briefing Ansible Operator - Operator Framework SIG: https://www.youtube.com/watch?v=YFTQJI6foGc

# ## Samples
# * Sample Operators using Ansible: https://github.com/operator-framework/operator-sdk-samples/tree/master/ansible

# ## Chat
# * Kubernetes Slack Chat (upstream): #kubernetes-operators at https://kubernetes.slack.com/
# * Operator-Framework on Google Groups: https://groups.google.com/forum/#!forum/operator-framework
# * OpenShift Operators Special Interest Group (SIG): https://commons.openshift.org/sig/OpenshiftOperators.html
